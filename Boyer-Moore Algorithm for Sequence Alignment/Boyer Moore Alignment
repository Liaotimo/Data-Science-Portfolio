{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ab316291",
   "metadata": {},
   "source": [
    "# Measuring the Benefit of Boyer-Moore's Algorithm\n",
    "Boyer-Moore algorithms are significantly more efficient compared to naive exact matching; here, the improvement in workload of a Boyer-Moore algorithm was quantified by measuring the number of character comparisons performed and the number of alignments tested.\n",
    "\n",
    "This exercise was part of Coursera's Algorithms for DNA Sequencing course as part of the Genomic Data Science specialization offered by the Johns Hopkins Unversity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7dbe3b5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This module provides the BoyerMoore class, which contains the preprocessing info used by the boyer moore function\n",
    "from bm_preproc import *\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "895bbca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Writing the Boyer Moore function to count the number of character comparisons\n",
    "def boyer_moore_with_counts(p, p_bm, t):\n",
    "    \"\"\" Do Boyer-Moore matching. p=pattern, t=text,\n",
    "        p_bm=BoyerMoore object for p \"\"\"\n",
    "    i = 0\n",
    "    occurrences = []\n",
    "    num_alignments = 0\n",
    "    num_character_comparisons = 0\n",
    "    while i < len(t) - len(p) + 1:\n",
    "        num_alignments += 1\n",
    "        shift = 1\n",
    "        mismatched = False\n",
    "        for j in range(len(p)-1, -1, -1):\n",
    "            num_character_comparisons += 1\n",
    "            if p[j] != t[i+j]:\n",
    "                skip_bc = p_bm.bad_character_rule(j, t[i+j])\n",
    "                skip_gs = p_bm.good_suffix_rule(j)\n",
    "                shift = max(shift, skip_bc, skip_gs)\n",
    "                mismatched = True\n",
    "                break\n",
    "        if not mismatched:\n",
    "            occurrences.append(i)\n",
    "            skip_gs = p_bm.match_skip()\n",
    "            shift = max(shift, skip_gs)\n",
    "        i += shift\n",
    "    return occurrences, num_alignments, num_character_comparisons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c525ee27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[40] 12 15\n"
     ]
    }
   ],
   "source": [
    "# Testing out the Boyer-Moore algorithm with counts\n",
    "p = 'word'\n",
    "t = 'there would have been a time for such a word'\n",
    "lowercase_alphabet = 'abcdefghijklmnopqrstuvwxyz '\n",
    "p_bm = BoyerMoore(p, lowercase_alphabet)\n",
    "occurrences, num_alignments, num_character_comparisons = boyer_moore_with_counts(p, p_bm, t)\n",
    "print(occurrences, num_alignments, num_character_comparisons)\n",
    "# ([40], 12, 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76009540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 19] 5 18\n"
     ]
    }
   ],
   "source": [
    "p = 'needle'\n",
    "t = 'needle need noodle needle'\n",
    "p_bm = BoyerMoore(p, lowercase_alphabet)\n",
    "occurrences, num_alignments, num_character_comparisons = boyer_moore_with_counts(p, p_bm, t)\n",
    "print(occurrences, num_alignments, num_character_comparisons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd525cf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contrasting the Boyer-Moore algorith to a naive exact matching algorithm\n",
    "# writing the naive algorithm to include a count of the number of character comparisons'\n",
    "\n",
    "def naive_with_counts(p, t):\n",
    "    occurences = []\n",
    "    num_alignments = 0\n",
    "    num_character_comparisons = 0\n",
    "    \n",
    "    for i in range(len(t) - len(p) + 1):\n",
    "        num_alignments += 1\n",
    "        match = True\n",
    "        for j in range(len(p)):\n",
    "            num_character_comparisons += 1\n",
    "            if t[i+j] != p[j]:\n",
    "                match = False\n",
    "                break\n",
    "        if match:\n",
    "            occurences.append(i)\n",
    "    return occurences, num_alignments, num_character_comparisons\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d37f8b4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[40] 41 46\n"
     ]
    }
   ],
   "source": [
    "# Testing out the cNaive algorithm with charact comparison counts\n",
    "p = 'word'\n",
    "t = 'there would have been a time for such a word'\n",
    "occurrences, num_alignments, num_character_comparisons = naive_with_counts(p, t)\n",
    "print(occurrences, num_alignments, num_character_comparisons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "569912ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 19] 20 35\n"
     ]
    }
   ],
   "source": [
    "p = 'needle'\n",
    "t = 'needle need noodle needle'\n",
    "occurrences, num_alignments, num_character_comparisons = naive_with_counts(p, t)\n",
    "print(occurrences, num_alignments, num_character_comparisons)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a93b585",
   "metadata": {},
   "source": [
    "Indeed, results suggested that the Boyer Moore algorithm is more comoputationally efficient than naive exact matching, as it required fewer character comparisons and alignments in both examples!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "74e01c16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For a more realistic example, testing out the alignment algorithm on a reference genome\n",
    "def readGenome(filename):\n",
    "    genome = ''\n",
    "    with open(filename, 'r') as f:\n",
    "        for line in f:\n",
    "            # ignore header line with genome information\n",
    "            if not line[0] == '>':\n",
    "                genome += line.rstrip()\n",
    "    return genome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f42c745c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TTGAATGCTGAAATCAGCAGGTAATATATGATAATAGAGAAAGCTATCCCGAAGGTGCATAGGTCAACAATACTTGAGCCTAACTCAGTAGATCCTAAAAGAAAGCAATTTTTGCTGCTAACCTAACATTTCACAATGTCTGGAGACATTTACAGTTCCCACAACCTATGGCAGTTACTGGCATCTACTAGAGGTCAGAG'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genome = readGenome('chr1.GRCh38.excerpt.fasta')\n",
    "genome[:200]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "380629f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Exact Matching \n",
      "\n",
      "Number of occurences:  [56922]\n",
      "Number of alignments:  799954\n",
      "Number of character comparisons:  984143\n"
     ]
    }
   ],
   "source": [
    "# 1 Naive exact matching with a sample pattern sequence\n",
    "p = 'GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG'\n",
    "t = genome\n",
    "occurrences, num_alignments, num_character_comparisons = naive_with_counts(p, t)\n",
    "print('Naive Exact Matching \\n')\n",
    "print('Number of occurences: ', occurrences)\n",
    "print('Number of alignments: ', num_alignments)\n",
    "print('Number of character comparisons: ', num_character_comparisons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f2325f3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Exact Matching \n",
      "\n",
      "Number of occurences:  [56922]\n",
      "Number of alignments:  799954\n",
      "Number of character comparisons:  984143\n"
     ]
    }
   ],
   "source": [
    "# 2 Naive exact matching with a sample pattern sequence\n",
    "\n",
    "p = 'GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG'\n",
    "t = genome\n",
    "occurrences, num_alignments, num_character_comparisons = naive_with_counts(p, t)\n",
    "print('Naive Exact Matching \\n')\n",
    "print('Number of occurences: ', occurrences)\n",
    "print('Number of alignments: ', num_alignments)\n",
    "print('Number of character comparisons: ', num_character_comparisons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4aab9557",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Boyer Moore \n",
      "\n",
      "Number of occurences:  [56922]\n",
      "Number of alignments:  127974\n",
      "Number of character comparisons:  165191\n"
     ]
    }
   ],
   "source": [
    "# 3 Boyer Moore with a sample pattern sequence\n",
    "\n",
    "p = 'GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG'\n",
    "t = genome\n",
    "p_bm = BoyerMoore(p)\n",
    "occurrences, num_alignments, num_character_comparisons = boyer_moore_with_counts(p, p_bm, t)\n",
    "print('Boyer Moore \\n')\n",
    "print('Number of occurences: ', occurrences)\n",
    "print('Number of alignments: ', num_alignments)\n",
    "print('Number of character comparisons: ', num_character_comparisons)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "20a117a4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Boyer Moore Improvements\n",
      "84 % fewer alignments\n",
      "83 % fewer character comparisons\n"
     ]
    }
   ],
   "source": [
    "# Boyer Moore improvements:\n",
    "print('Boyer Moore Improvements')\n",
    "print(100 - round(127974/799954*100), '% fewer alignments')\n",
    "print(100 - round(165191/984143*100), '% fewer character comparisons')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e388910",
   "metadata": {},
   "source": [
    "Boyer Moore found the same number of occurrences of the pattern string in the reference text, while using significantly fewer alignments and comparisons!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c94bfe61",
   "metadata": {},
   "outputs": [],
   "source": [
    "from kmer_index import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "00e6a839",
   "metadata": {},
   "outputs": [],
   "source": [
    "def boyer_moore(p, p_bm, t):\n",
    "    \"\"\" Do Boyer-Moore matching. p=pattern, t=text,\n",
    "        p_bm=BoyerMoore object for p \"\"\"\n",
    "    i = 0\n",
    "    occurrences = []\n",
    "    num_alignments = 0\n",
    "    num_character_comparisons = 0\n",
    "    while i < len(t) - len(p) + 1:\n",
    "        num_alignments += 1\n",
    "        shift = 1\n",
    "        mismatched = False\n",
    "        for j in range(len(p)-1, -1, -1):\n",
    "            num_character_comparisons += 1\n",
    "            if p[j] != t[i+j]:\n",
    "                skip_bc = p_bm.bad_character_rule(j, t[i+j])\n",
    "                skip_gs = p_bm.good_suffix_rule(j)\n",
    "                shift = max(shift, skip_bc, skip_gs)\n",
    "                mismatched = True\n",
    "                break\n",
    "        if not mismatched:\n",
    "            occurrences.append(i)\n",
    "            skip_gs = p_bm.match_skip()\n",
    "            shift = max(shift, skip_gs)\n",
    "        i += shift\n",
    "    return occurrences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fe7c6fce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Approximate matching using boyer moore algorithm\n",
    "def approximate_match(p, t, n):\n",
    "    segment_length = int(round(len(p) / (n+1)))\n",
    "    all_matches = set()\n",
    "    for i in range(n+1): # for each partition\n",
    "        start = i*segment_length\n",
    "        end = min((i+1)*segment_length, len(p))\n",
    "        p_bm = BoyerMoore(p[start:end], alphabet='ACGT')\n",
    "        matches = boyer_moore(p[start:end], p_bm, t)\n",
    "        for m in matches:\n",
    "            if m < start or m-start+len(p) > len(t):\n",
    "                continue\n",
    "            \n",
    "            mismatches = 0\n",
    "            for j in range(0,start):\n",
    "                text_start = m - start\n",
    "                if not p[j] == t[text_start+j]:\n",
    "                    mismatches += 1\n",
    "                    if mismatches > n:\n",
    "                        break\n",
    "            for j in range(end, len(p)):\n",
    "                text_start = m - start\n",
    "                if not p[j] == t[text_start+j]:\n",
    "                    mismatches += 1\n",
    "                    if mismatches > n:\n",
    "                        break\n",
    "            \n",
    "            if mismatches <= n:\n",
    "                all_matches.add(m-start)\n",
    "    return list(all_matches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "833d2cad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 5]\n"
     ]
    }
   ],
   "source": [
    "# testing out approximate matching\n",
    "p = 'AACTTG'\n",
    "t = 'CACTTAATTTG'\n",
    "print(approximate_match(p, t, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e5c10372",
   "metadata": {},
   "outputs": [],
   "source": [
    "def queryIndex(p, t, index):\n",
    "    ''' \n",
    "    Input pattern to query, text to search and index of kmers to use\n",
    "    outputs a list of offset matches\n",
    "    '''\n",
    "    k = index.k\n",
    "    offsets = []\n",
    "    for i in index.query(p):\n",
    "        if p[k:] == t[i+k:i+len(p)]:\n",
    "            offsets.append(i)\n",
    "    return offsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "93753eb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def naive_2mm(p, t):\n",
    "    occurences = []\n",
    "    for i in range(len(t) - len(p) + 1):\n",
    "        num_mismatches = 0\n",
    "        match = True\n",
    "        for j in range(len(p)):\n",
    "            if not t[i+j] == p[j]:\n",
    "                num_mismatches += 1\n",
    "                if num_mismatches >2:\n",
    "                    match = False\n",
    "                    break\n",
    "        if match:\n",
    "            occurences.append(i)\n",
    "    return occurences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "94d01117",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[56922, 84641, 147558, 160162, 160729, 191452, 262042, 273669, 364263, 421221, 429299, 465647, 551134, 635931, 657496, 681737, 717706, 724927, 747359]\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "p = 'GGCGCGGTGGCTCACGCCTGTAAT'\n",
    "t = genome\n",
    "print(naive_2mm(p,t))\n",
    "print(len(set(naive_2mm(p, t))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bfc55796",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[273669, 681737, 717706, 262042, 635931, 84641, 160162, 724927, 657496, 160729, 56922, 191452, 551134, 747359, 421221, 147558, 364263, 465647, 429299]\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "p = 'GGCGCGGTGGCTCACGCCTGTAAT'\n",
    "t = genome\n",
    "index = Index(t, k=8)\n",
    "index_hits_to_check = index.query_24(p)\n",
    "final_hits = []\n",
    "for hit_i in index_hits_to_check:\n",
    "    mismatches = 0\n",
    "    for i in range(len(p)):\n",
    "        if t[hit_i+i] != p[i]:\n",
    "            mismatches += 1\n",
    "        if mismatches > 2:\n",
    "            break\n",
    "    if mismatches < 3:\n",
    "        final_hits.append(hit_i)\n",
    "final_hits = list(set(final_hits))\n",
    "print(final_hits)\n",
    "print(len(final_hits))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "00ba5e70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[56922, 57056, 83720, 84641, 147558, 160729, 191452, 262042, 364263, 657496, 681737, 717706, 725061, 18870, 56922, 160162, 262042, 273669, 282004, 364263, 421221, 429299, 465647, 472634, 489438, 551134, 621362, 657496, 717706, 724927, 18733, 19166, 22397, 22532, 23003, 23138, 43127, 56922, 67363, 83720, 83863, 84641, 84775, 108110, 128994, 147558, 160729, 175310, 185996, 187655, 191452, 205381, 251090, 251224, 262042, 273669, 282004, 322735, 364263, 364396, 421221, 429299, 454332, 465647, 471966, 480501, 480642, 523085, 551134, 551827, 572196, 588478, 595541, 613459, 621491, 632305, 635931, 646488, 651523, 657496, 674056, 681737, 707151, 717706, 719418, 724927, 746620, 747359, 747495, 760489]\n",
      "90\n"
     ]
    }
   ],
   "source": [
    "p = 'GGCGCGGTGGCTCACGCCTGTAAT'\n",
    "t = genome\n",
    "index = Index(t, k=8)\n",
    "index_hits_to_check = index.query_24(p)\n",
    "# final_hits = []\n",
    "# for hit_i in index_hits_to_check:\n",
    "#     mismatches = 0\n",
    "#     for i in range(len(p)):\n",
    "#         if t[hit_i+i] != p[i]:\n",
    "#             mismatches += 1\n",
    "#         if mismatches > 2:\n",
    "#             break\n",
    "#     if mismatches < 3:\n",
    "#         final_hits.append(hit_i)\n",
    "# final_hits = list(set(final_hits))\n",
    "print(index_hits_to_check)\n",
    "print(len(index_hits_to_check))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fa0f1b2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[56922, 67486, 83863, 84641, 84775, 124024, 147558, 191452, 199607, 262042, 262174, 273669, 322735, 364263, 421354, 454332, 465647, 471966, 472634, 489019, 558456, 579737, 596898, 635931, 651523, 657496, 658702, 681737, 707151, 712449, 717706, 719418, 719557, 746620, 747359]\n",
      "35\n"
     ]
    }
   ],
   "source": [
    "p = 'GGCGCGGTGGCTCACGCCTGTAAT'\n",
    "t = genome\n",
    "index = SubseqIndex(t, k=8, ival=3)\n",
    "index_hits_to_check = index.query(p)\n",
    "print(index_hits_to_check)\n",
    "print(len(index_hits_to_check))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9d59df94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[84641, 273669, 147558, 364263, 681737, 717706, 465647, 747359, 657496, 56922, 635931, 191452, 262042]\n",
      "13\n"
     ]
    }
   ],
   "source": [
    "t = genome\n",
    "p = 'GGCGCGGTGGCTCACGCCTGTAAT'\n",
    "index = SubseqIndex(t, 8, 3)\n",
    "index_hits_to_check = index.query(p)\n",
    "final_hits = []\n",
    "for hit_i in index_hits_to_check:\n",
    "    mismatches = 0\n",
    "    for i in range(len(p)):\n",
    "        if t[hit_i+i] != p[i]:\n",
    "            mismatches += 1\n",
    "        if mismatches > 2:\n",
    "            break\n",
    "    if mismatches < 3:\n",
    "        final_hits.append(hit_i)\n",
    "final_hits = list(set(final_hits))\n",
    "print(final_hits)\n",
    "print(len(final_hits))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
